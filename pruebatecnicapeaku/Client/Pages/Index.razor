@page "/"

@inject IRepository repository
@inject IToastService toastService

<div>
    <h3>Service Providers</h3>
    <ServiceProviderList ServiceProviders="ServiceProviders" Id="id" OnValidSubmit="showedit" />
</div>



@if (isnew && id==0)
{
    <ServiceProviderForm OnValidSubmit="AddServiceProvider" newServiceProvider="newServiceProvider" option="Create"></ServiceProviderForm>
}

else
{
    <button class="btn btn-outline-info" @onclick="shownew">Add Service Provider</button>
}

@if (id != 0)
{
    <ServiceProviderForm OnValidSubmit="EditServiceProvider" newServiceProvider="newServiceProvider" option="Edit"></ServiceProviderForm>

}



@code {

    private bool isnew;

    private bool isedit;

    int id=0;
    private ServiceProvider newServiceProvider = new ServiceProvider();
    private List<ServiceProvider> ServiceProviders;

    protected async override Task OnInitializedAsync()
    {
        var responsehttp = await repository.Get<List<ServiceProvider>>("api/ServiceProvider");
        ServiceProviders = responsehttp.Response;
        //ServiceProviders = repository.GetServiceproviders();
        isnew = false;
        isedit = false;

    }

    void shownew()
    {
        newServiceProvider = new ServiceProvider();
        isnew = true;
        isedit = false;
        id = 0;

    }


    void showedit(ServiceProvider serviceprovider)
    {
        id = serviceprovider.Id;
        newServiceProvider = ServiceProviders.Where(x => x.Id == id).FirstOrDefault();
        Console.WriteLine("el id es:" + id);
    }



    private async Task  AddServiceProvider()
    {


        isnew = false;
        newServiceProvider.Creationdate = DateTime.Now;

        var httpResponse = await repository.Post("api/ServiceProvider", newServiceProvider);
        if (httpResponse.Error)
        {
            var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
            toastService.ShowError(body, "Error!");
        }
        else
        {
            ServiceProviders.Add(newServiceProvider);

            id = 0;
            newServiceProvider = null;

            toastService.ShowSuccess("Record created successfully", "Congratulations!");
        }



    }

    async Task EditServiceProvider()
    {
        var httpResponse = await repository.Put("api/ServiceProvider", newServiceProvider);

        if (httpResponse.Error)
        {
            var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
            toastService.ShowError(body, "Error!");
        }
        else
        {

            var indexOf = ServiceProviders.IndexOf(ServiceProviders.Find(p => p.Id == newServiceProvider.Id));
            ServiceProviders[indexOf] = newServiceProvider;
            id = 0;
            newServiceProvider = null;

            toastService.ShowSuccess("Record edited successfully", "Congratulations!");
        }



    }

}
