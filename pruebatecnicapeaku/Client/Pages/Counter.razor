@page "/counter"

@inject IRepository repository
@inject IToastService toastService

<div>
    <h3>Services</h3>
    <ServiceList Services="Services" OnValidSubmit="showedit" />
    <div class="col-md-3" style="padding-left:0px;">
        <Pagination ActualPage="actualpage" TotalPages="totalpages" SelectedPage="selectedpage" />
    </div>
</div>

@if (isnew && id == 0)
{
    <ServiceForm OnValidSubmit="AddServiceProvider" newService="newService" ServiceProviders="ServiceProviders" option="Create"></ServiceForm>
}

else
{
    <button class="btn btn-outline-info" @onclick="shownew">Add Service</button>
}

@if (id != 0)
{
    <ServiceForm OnValidSubmit="EditServiceProvider" newService="newService" ServiceProviders="ServiceProviders" option="Edit"></ServiceForm>

}

@code {

    private List<Service> Services;
    private List<ServiceProvider> ServiceProviders;
    private string serviceproviderID;

    protected async override Task OnInitializedAsync()
    {
        var responsehttp = await repository.Get<List<ServiceProvider>>("api/ServiceProvider");
        ServiceProviders = responsehttp.Response;

        await LoadData(1);

        //ServiceProviders = repository.GetServiceproviders();
        isnew = false;
        isedit = false;
    }


    private async Task LoadData(int page)
    {

        var responsehttp = await repository.Get<List<Service>>($"api/Service?page={page}");
        if (!responsehttp.Error)
        {
            Services = responsehttp.Response;
            var count = responsehttp.HttpResponseMessage.Headers.GetValues("countrecords").FirstOrDefault();
            totalpages = int.Parse(responsehttp.HttpResponseMessage.Headers.GetValues("totalpages").FirstOrDefault());
        }
    }

    private int actualpage = 1;

    private int totalpages;

    private async Task selectedpage(int page)
    {
        actualpage = page;
        await LoadData(actualpage);

    }




    async Task AddServiceProvider()
    {
        isnew = false;
        newService.Creationdate = DateTime.Now;
        newService.IdServiceProvider = Convert.ToInt32(serviceproviderID);

        var httpResponse = await repository.Post("api/Service", newService);
        if (httpResponse.Error)
        {
            var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
            toastService.ShowError(body, "Error!");
        }
        else
        {

            Services.Add(newService);

            id = 0;
            newService = null;

            toastService.ShowSuccess("Record created successfully", "Congratulations!");
            await LoadData(actualpage);
        }


    }




    private bool isnew;

    private bool isedit;

    int id = 0;
    private Service newService = new Service();




    void shownew()
    {
        newService = new Service();
        isnew = true;
        isedit = false;
        id = 0;

    }


    void showedit(Service service)
    {
        id = service.Id;
        newService = Services.Where(x => x.Id == id).FirstOrDefault();
        Console.WriteLine("el id es:" + id);
    }





    async Task EditServiceProvider()
    {

        var httpResponse = await repository.Put("api/Service", newService);


        if (httpResponse.Error)
        {
            var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
            toastService.ShowError(body, "Error!");
        }
        else
        {

            var indexOf = Services.IndexOf(Services.Find(p => p.Id == newService.Id));
            Services[indexOf] = newService;
            id = 0;
            newService = null;

            toastService.ShowSuccess("Record edited successfully", "Congratulations!");
        }



    }



}
