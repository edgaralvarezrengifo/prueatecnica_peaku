@inject IRepository repository
@inject IToastService toastService

<GenericList TList="Services">
    <Records>
        <table class="table table-striped" style="width:100%">
            <thead>
                <tr>
                    <th>Service Name</th>
                    <th>Provider</th>
                    <th>Country</th>
                    <th>Price</th>
                    <th>Creation Date</th>
                    <AuthorizeView Roles="admin">
                        <Authorized>
                            <th>Actions</th>
                        </Authorized>

                    </AuthorizeView>

                   
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in Services)
                {
                <tr>

                    <td>@forecast.Name</td>
                    <td>@forecast.IdServiceProvider</td>
                    <td>@forecast.Country </td>
                    <td>@forecast.price </td>
                    <td>@forecast.Creationdate</td>
                    <AuthorizeView Roles="admin">
                        <Authorized>
                            <td>
                                <button class="btn btn-outline-danger" @onclick="@(() => DeleteService(forecast))">Delete</button>
                                <button class="btn btn-outline-primary" @onclick="@(() => OnValidSubmit.InvokeAsync(forecast))">Edit</button>
                            </td>
                        </Authorized>

                    </AuthorizeView>
                   
                </tr>
                }
            </tbody>
        </table>
    </Records>
</GenericList>

<Confirmation @ref="confirmation" onConfirm="DeleteServiceConfirmation"
              onCancel="onCancelConfirmation">
    <div>¿Do you want delete this record?</div>
</Confirmation>

@code {
    Confirmation confirmation;
    [Parameter] public List<Service> Services { get; set; }
    [Parameter] public EventCallback<Service> OnValidSubmit { get; set; }



    bool MostrarBotones = true;

    void DeleteService(Service service)
    {
        confirmation.Show();
        deleteservice = service;

    }
    Service deleteservice;
    async Task DeleteServiceConfirmation()
    {
        var responeHttp = await repository.Delete($"api/Service/{deleteservice.Id}");
        if (responeHttp.Error)
        {
            var body = await responeHttp.HttpResponseMessage.Content.ReadAsStringAsync();
            toastService.ShowError(body, "Error!");
        }
        else
        {
            Services.Remove(deleteservice);
            confirmation.Hide();
            deleteservice = null;
            toastService.ShowSuccess("Record deleted successfully", "Congratulations!");
        }
    }

    void onCancelConfirmation()
    {
        confirmation.Hide();
        deleteservice = null;
    }
}